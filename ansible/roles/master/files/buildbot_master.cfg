# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
import json

WORKER_PASSWORDS = json.load(open("worker-passwords.json"))
BUILDMASTER_CONFIG = json.load(open("buildmaster-config.json"))
repourl = "{url}/{name}".format(**BUILDMASTER_CONFIG)

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
    worker.Worker("debian", WORKER_PASSWORDS["debian"]),
    worker.Worker("windows", WORKER_PASSWORDS["windows"])
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {
    'pb': {
        'port': BUILDMASTER_CONFIG['worker_port']
    }
}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        repourl,
        workdir='gitpoller-workdir', branch=BUILDMASTER_CONFIG['branch'],
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch=BUILDMASTER_CONFIG['branch']),
                            treeStableTimer=None,
                            builderNames=["debian", "windows"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["debian", "windows"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.
step_clean = steps.RemoveDirectory(dir='build')
step_checkout = steps.Git(
    repourl=repourl,
    branch=BUILDMASTER_CONFIG['branch'],
    mode='incremental',
    submodules=True,
    progress=True
)
from buildbot.steps.cmake import CMake
step_build = CMake(
    name='build',
    workdir='build',
    options=['--build', '.']
)

debian_factory = util.BuildFactory()
debian_factory.workdir = 'source'
debian_factory.addSteps([
    step_clean,
    step_checkout,
    CMake(workdir='build',
          path='../source',
          generator='Ninja'),
    step_build,
    steps.ShellCommand(name='test',
                       workdir='build',
                       command=['ninja', 'runtests'])
])

windows_factory = util.BuildFactory()
windows_factory.workdir = 'source'
windows_factory.addSteps([
    step_clean,
    step_checkout,
    CMake(workdir='build',
          path='../source'),
    step_build,
    steps.ShellCommand(name='test',
                       workdir='build',
                       command=['msbuild', 'runtests.vcxproj'])
])

c['builders'] = [
    util.BuilderConfig(name="debian",
                       workernames=["debian"],
                       factory=debian_factory),
    util.BuilderConfig(name="windows",
                       workernames=["windows"],
                       factory=windows_factory)
]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### SERVICES
from buildbot.plugins import reporters
c['services'] = []

if 'irc_host' in BUILDMASTER_CONFIG:
    c['services'].append(
        reporters.IRC(
            BUILDMASTER_CONFIG['irc_host'],
            b'{name}'.format(**BUILDMASTER_CONFIG),
            port=BUILDMASTER_CONFIG['irc_port'],
            useColors=True,
            channels=[
                b'#{}'.format(channel) for channel in BUILDMASTER_CONFIG['irc_channels']
            ],
            notify_events={
              'failure': 1,
              'exception': 1,
            }
        )
    )

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = BUILDMASTER_CONFIG['name']
c['titleURL'] = repourl

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in 
# the 'www' entry below, but with an externally-visible host name which the 
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://{host}:{web_port}/".format(**BUILDMASTER_CONFIG)

# minimalistic config to activate new web UI
c['www'] = dict(port=BUILDMASTER_CONFIG['web_port'],
                plugins=dict(waterfall_view={}, console_view={}),
                avatar_methods=[])

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
