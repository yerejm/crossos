# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
from buildbot.steps.cmake import CMake
import json

WORKER_PASSWORDS = json.load(open('worker-passwords.json'))
BUILDMASTER_CONFIG = json.load(open('buildmaster-config.json'))
repourl = '{url}/{name}'.format(**BUILDMASTER_CONFIG)

step_clean = steps.RemoveDirectory(dir='build')
step_checkout = steps.Git(
    repourl=repourl,
    branch=BUILDMASTER_CONFIG['branch'],
    mode='incremental',
    submodules=True,
    progress=True
)

def create_linux_build(build_type, test=True):
    f = util.BuildFactory()
    f.workdir = 'source'
    f.addStep(step_clean)
    f.addStep(step_checkout)
    f.addStep(CMake(workdir='build',
                    path='../source',
                    generator='Ninja',
                    definitions={ 'CMAKE_BUILD_TYPE': build_type },
                    options=[ '-Wno-dev' ]))
    f.addStep(CMake(name='build',
                    workdir='build',
                    options=['--build', '.', '--config', build_type]))
    if test:
        f.addStep(steps.ShellCommand(name='test',
                                     workdir='build',
                                     command=['ninja', 'runtests']))
    if build_type is not 'release':
        f.addStep(steps.Trigger(schedulerNames=['linux-release'], waitForFinish=False))
    return f

def create_windows_build(build_type, test=True):
    f = util.BuildFactory()
    f.workdir = 'source'
    f.addStep(step_clean)
    f.addStep(step_checkout)
    f.addStep(CMake(workdir='build',
                    path='../source',
                    definitions={ 'CMAKE_BUILD_TYPE': build_type },
                    options=[ '-Wno-dev' ]))
    f.addStep(CMake(name='build',
                    workdir='build',
                    options=['--build', '.', '--config', build_type]))
    if test:
        f.addStep(steps.ShellCommand(name='test',
                                     workdir='build',
                                     command=['msbuild', '/p:Configuration=' + build_type, 'runtests.vcxproj']))
    if build_type is not 'release':
        f.addStep(steps.Trigger(schedulerNames=['windows-release'], waitForFinish=False))
    return f

linux_debug = schedulers.AnyBranchScheduler(name='linux-debug',
                                            builderNames=['linux-debug'])
linux_release = schedulers.Triggerable(name='linux-release',
                                       builderNames=['linux-release'])
windows_debug = schedulers.AnyBranchScheduler(name='windows-debug',
                                              builderNames=['windows-debug'])
windows_release = schedulers.Triggerable(name='windows-release',
                                         builderNames=['windows-release'])
force = schedulers.ForceScheduler(name='force',
                                  builderNames=[
                                      'linux-debug', 'linux-release',
                                      'windows-debug', 'windows-release'
                                  ])

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
BuildmasterConfig = {

    ####### WORKERS
    # The 'workers' list defines the set of recognized workers. Each element is
    # a Worker object, specifying a unique worker name and password.  The same
    # worker name and password must be configured on the worker.
    'workers': [
        worker.Worker('debian', WORKER_PASSWORDS['debian']),
        worker.Worker('windows', WORKER_PASSWORDS['windows'])
    ],
    # 'protocols' contains information about protocols which master will use for
    # communicating with workers. You must define at least 'port' option that workers
    # could connect to your master with this protocol.
    # 'port' must match the value configured into the workers (with their
    # --master option)
    'protocols': {
        'pb': {
            'port': BUILDMASTER_CONFIG['worker_port']
        }
    },

    ####### CHANGESOURCES
    # the 'change_source' setting tells the buildmaster how it should find out
    # about source code changes.
    'change_source': [
        changes.GitPoller(
            repourl,
            workdir='gitpoller-workdir', branch=BUILDMASTER_CONFIG['branch'],
            pollinterval=300
        )
    ],

    ####### SCHEDULERS
    # Configure the Schedulers, which decide how to react to incoming changes.
    'schedulers': [
        linux_debug,
        linux_release,
        windows_debug,
        windows_release,
        force
    ],

    ####### BUILDERS
    # The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
    # what steps, and which workers can execute them.  Note that any particular build will
    # only take place on one worker.
    'builders': [
        util.BuilderConfig(name='linux-release',
            workernames=['debian'],
            factory=create_linux_build('release')),
        util.BuilderConfig(name='linux-debug',
            workernames=['debian'],
            factory=create_linux_build('debug')),
        util.BuilderConfig(name='windows-release',
            workernames=['windows'],
            factory=create_windows_build('release')),
        util.BuilderConfig(name='windows-debug',
            workernames=['windows'],
            factory=create_windows_build('debug'))
    ],

    ####### STATUS TARGETS
    # 'status' is a list of Status Targets. The results of each build will be
    # pushed to these targets. buildbot/status/*.py has a variety to choose from,
    # like IRC bots.
    'status': [],

    ####### SERVICES
    'services': [
        reporters.IRC(
            BUILDMASTER_CONFIG['irc_host'],
            b'{name}'.format(**BUILDMASTER_CONFIG),
            port=BUILDMASTER_CONFIG['irc_port'],
            useColors=True,
            channels=[
                b'#{}'.format(channel) for channel in BUILDMASTER_CONFIG['irc_channels']
            ],
            notify_events={
                'failure': 1,
                'exception': 1,
            }
        )
    ],

    ####### PROJECT IDENTITY
    # the 'title' string will appear at the top of this buildbot installation's
    # home pages (linked to the 'titleURL').
    'title': BUILDMASTER_CONFIG['name'],
    'titleURL': repourl,

    # the 'buildbotURL' string should point to the location where the buildbot's
    # internal web server is visible. This typically uses the port number set in 
    # the 'www' entry below, but with an externally-visible host name which the 
    # buildbot cannot figure out without some help.
    'buildbotURL': 'http://{host}:{web_port}/'.format(**BUILDMASTER_CONFIG),

    # minimalistic config to activate new web UI
    'www': dict(port=BUILDMASTER_CONFIG['web_port'],
        plugins=dict(waterfall_view={}, console_view={}),
        avatar_methods=[]),

    ####### DB URL
    'db': {
        # This specifies what database buildbot uses to store its state.  You can leave
        # this at its default for all but the largest installations.
        'db_url' : 'sqlite:///state.sqlite',
    }
}
